version: "3.8"

services:
  frontend:
    build: ./frontend
    container_name: roost-frontend
    environment:
      - NODE_ENV=production
    restart: unless-stopped
    networks:
      - roost-network

  backend:
    build: ./roost-api
    container_name: roost-backend
    environment:
      - RAILS_ENV=production
      - DATABASE_URL=postgres://postgres:${DB_PASSWORD}@db:5432/roost_production
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
      - db
      - elasticsearch
    restart: unless-stopped
    networks:
      - roost-network

  db:
    image: postgres:14-alpine
    container_name: roost-postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=roost_production
    restart: unless-stopped
    networks:
      - roost-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    container_name: roost-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    restart: unless-stopped
    networks:
      - roost-network

  caddy:
    image: caddy:2
    container_name: roost-caddy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile
      - ./caddy/data:/data
      - ./caddy/config:/config
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - roost-network

volumes:
  postgres_data:
  elasticsearch_data:

networks:
  roost-network:
    driver: bridge
